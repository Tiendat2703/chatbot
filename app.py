from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from perfect import main
import os

from bson import ObjectId
import pymongo
from datetime import datetime

import numpy as np
import pandas as pd
import google.generativeai as genai
import time
import json

import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go

from send_otp import send_otp  # Nh·ªõ import h√†m send_otp
from check_email import check_email_exists 
from datetime import datetime, timedelta

# Flask app setup
app = Flask(__name__)
app.config['SECRET_KEY'] = 'supersecretkey'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'
login_manager.login_message_category = 'info'

mongo_client = pymongo.MongoClient('mongodb+srv://admin:adminmirage@unix.xrw4tsm.mongodb.net')

# User model
class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Home page
@app.route('/')
@login_required
def home():
    return render_template('index.html', user=current_user)

#log in 
@app.route('/login', methods=['GET', 'POST'])
def login():
    email_prefill = session.pop('temp_email', '')
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']

        user = User.query.filter_by(email=email).first()

        if not user:
            flash('Email is not registered!', 'danger')  # üõ† Th√¥ng b√°o l·ªói email ch∆∞a ƒëƒÉng k√Ω
            # üëá Gi·ªØ l·∫°i email ƒë√£ nh·∫≠p
            return render_template('login.html', email=email)

        if not bcrypt.check_password_hash(user.password, password):
            flash('Incorrect password!', 'danger')  # üõ† Th√¥ng b√°o l·ªói password sai
            # üëá Gi·ªØ l·∫°i email ƒë√£ nh·∫≠p
            return render_template('login.html', email=email)

        # N·∫øu ƒë√∫ng c·∫£ email v√† password
        login_user(user)
        flash('Logged in successfully!', 'success')
        return redirect(url_for('home'))

    # Tr∆∞·ªùng h·ª£p GET ban ƒë·∫ßu ‚Üí d√πng email_prefill n·∫øu c√≥
    return render_template('login.html', email=email_prefill)

# Register
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']

        # Check tr√πng email
        if User.query.filter_by(email=email).first():
            flash('Email already exists. Try another one.', 'warning')
            return redirect(url_for('register'))
        
        # Check tr√πng username
        if User.query.filter_by(username=username).first():
            flash('username already exists. Try another one.', 'warning')
            return redirect(url_for('register'))
        
        # Hash password
        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')

        # Tr∆∞·ªõc khi g·ª≠i OTP
        if not check_email_exists(email):
            flash('Email is invalid or does not exist.', 'danger')
            return redirect(url_for('register'))
        
        # Send OTP
        # Send OTP
        from send_otp import send_otp
        otp_code = send_otp(email)

        if otp_code is None:
            flash('Failed to send OTP. Please check your email address.', 'danger')
            return redirect(url_for('register'))
        session['email'] = email
        # N·∫øu g·ª≠i th√†nh c√¥ng th√¨ l∆∞u t·∫°m
        session['temp_user'] = {
            'username': username,
            'email': email,
            'password': hashed_password
        }
        session['otp'] = otp_code

        flash('OTP has been sent to your email. Please check and enter it.', 'info')
        return redirect(url_for('verify_otp'))


    return render_template('register.html'
                           )
#verify otp
@app.route('/verify_otp', methods=['GET', 'POST'])
def verify_otp():
    if request.method == 'POST':
        user_otp = request.form.get('otp')
        stored_otp = session.get('otp')
        temp_user = session.get('temp_user')

        # üß™ Debug log (in ra terminal)
        print(">> User entered OTP:", user_otp)
        print(">> OTP stored in session:", stored_otp)
        print(">> Temp user data:", temp_user)

        if user_otp == stored_otp:
            if not temp_user:
                flash("Session expired. Please register again.", "warning")
                return redirect(url_for('register'))

            # ‚úÖ T·∫°o user m·ªõi
            new_user = User(
                username=temp_user['username'],
                email=temp_user['email'],
                password=temp_user['password']
            )
            db.session.add(new_user)
            db.session.commit()
            session['temp_email'] = temp_user['email']
            flash("Account created successfully! You can now log in!", "success")

            # ‚úÖ X√≥a d·ªØ li·ªáu session t·∫°m
            session.pop('temp_user', None)
            session.pop('otp', None)
            session.pop('email', None)

            return redirect(url_for('login'))

        else:
            flash("‚ùå The OTP you entered is incorrect. Please try again.", "danger")
            return redirect(url_for('verify_otp', purpose="register"))

    return render_template('verify_otp.html')
#resend otp

@app.route('/resend_otp', methods=['GET'])
def resend_otp():
    now = datetime.utcnow()
    last_sent = session.get('last_otp_time')

    if last_sent:
        last_time = datetime.strptime(last_sent, "%Y-%m-%d %H:%M:%S")
        if now - last_time < timedelta(seconds=60):
            remaining = 60 - int((now - last_time).total_seconds())
            flash(f'Please wait {remaining}s before requesting another OTP.', 'warning')
            return redirect(url_for('verify_otp'))

    email = session.get('email')
    if email:
        otp = send_otp(email)
        if otp:
            session['otp'] = otp
            session['last_otp_time'] = now.strftime("%Y-%m-%d %H:%M:%S")
            flash('A new OTP has been sent to your email.', 'success')
        else:
            flash('Failed to resend OTP. Please try again.', 'danger')
    else:
        flash('Session expired. Please register again.', 'danger')
    return redirect(url_for('verify_otp'))

#forget_password
@app.route('/forget_password', methods=['GET', 'POST'])
def forget_password():
    if request.method == 'POST':
        email = request.form['email']
        user = User.query.filter_by(email=email).first()

        if not user:
            flash('Email is not registered!', 'danger')
            return redirect(url_for('forget_password'))

        # ‚úÖ G·ª≠i OTP v·ªÅ email
        from send_otp import send_otp
        otp_code = send_otp(email)

        if not otp_code:
            flash('Failed to send OTP.', 'danger')
            return redirect(url_for('forget_password'))

        session['reset_email'] = email
        session['reset_otp'] = otp_code
        flash('OTP sent! Please check your email.', 'info')
        return redirect(url_for('verify_reset_otp'))

    return render_template('forget_password.html')

#verify_reset_otp
@app.route('/verify_reset_otp', methods=['GET', 'POST'])
def verify_reset_otp():
    if request.method == 'POST':
        otp = request.form['otp']
        if otp == session.get('reset_otp'):
            flash('OTP verified! Now reset your password.', 'success')
            
            return redirect(url_for('reset_password'))
        else:
            flash('Incorrect OTP!', 'danger')
    return render_template('verify_otp.html', purpose="reset")

#reset_passwpassw
@app.route('/reset_password', methods=['GET', 'POST'])
def reset_password():
    if request.method == 'POST':
        new_pw = request.form['password']
        email = session.get('reset_email')
        user = User.query.filter_by(email=email).first()
        if user:
            user.password = bcrypt.generate_password_hash(new_pw).decode('utf-8')
            db.session.commit()
            flash('Password has been reset. Please log in.', 'success')
            session.pop('reset_email', None)
            session.pop('reset_otp', None)
            session['temp_email'] = email
            return redirect(url_for('login'))
    return render_template('reset_password.html')

# Logout
@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out.', 'info')
    return redirect(url_for('login'))

# Profile view
@app.route('/profile')
@login_required
def profile():
    return render_template('profile.html', user=current_user)

# Edit Profile
@app.route('/edit_profile', methods=['POST'])
@login_required
def edit_profile():
    new_username = request.form.get('username')
    if new_username:
        existing_user = User.query.filter_by(username=new_username).first()
        if existing_user and existing_user.id != current_user.id:
            flash('Username already taken. Try another one.', 'warning')
            return redirect(url_for('profile'))
        current_user.username = new_username
        db.session.commit()
        flash('Profile updated successfully!', 'success')
    return redirect(url_for('profile'))

# Delete Account
@app.route('/delete_account', methods=['POST'])
@login_required
def delete_account():
    db.session.delete(current_user)
    db.session.commit()
    logout_user()
    flash('Your account has been deleted.', 'warning')
    return redirect(url_for('register'))


# Chart chatbot
# Load data chart
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
file_path = os.path.join(BASE_DIR, 'transform_filled_chitieu.xlsx')
df1 = pd.read_excel(file_path)

# Clean data c∆° b·∫£n
df1.dropna(subset=['ƒêi·ªÉm Chu·∫©n', 'Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'], inplace=True)

for col in ['T√™n tr∆∞·ªùng', 'T√™n Ng√†nh', 'Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn']:
    df1[col] = df1[col].str.strip()

df1['NƒÉm'] = df1['NƒÉm'].astype(int)
df1['ƒêi·ªÉm Chu·∫©n'] = pd.to_numeric(df1['ƒêi·ªÉm Chu·∫©n'], errors='coerce')

# Filter theo ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn "THPT qu·ªëc gia"
df_thpt = df1[df1['Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'] == 'THPT Qu·ªëc gia']

# Route Trang Chart
@app.route('/chart')
@login_required
def chart():
    return render_template('chart.html', user=current_user)

# API Chart 1
@app.route('/api/chart1')
@login_required
def api_chart1():
    data = df_thpt.groupby(['T√™n tr∆∞·ªùng', 'T√™n Ng√†nh', 'NƒÉm'])['ƒêi·ªÉm Chu·∫©n'].mean().reset_index()
    return json.dumps(data.to_dict(orient='records'), ensure_ascii=False)

# API Chart 2
@app.route('/api/chart2')
@login_required
def api_chart2():
    data = df_thpt.groupby(['NƒÉm', 'T√™n Ng√†nh', 'T√™n tr∆∞·ªùng'])['ƒêi·ªÉm Chu·∫©n'].mean().reset_index()
    return json.dumps(data.to_dict(orient='records'), ensure_ascii=False)

# API Chart 3
@app.route('/api/chart3')
@login_required
def api_chart3():
    grouped = df_thpt.groupby('NƒÉm').agg({
        'ƒêi·ªÉm Chu·∫©n': 'mean',
        'T√™n Ng√†nh': 'nunique'
    }).reset_index()
    grouped.rename(columns={'T√™n Ng√†nh': 'S·ªë l∆∞·ª£ng ng√†nh'}, inplace=True)
    return json.dumps(grouped.to_dict(orient='records'), ensure_ascii=False)

# API Chart 4
@app.route('/api/chart4')
@login_required
def api_chart4():
    data = df_thpt.groupby(['T√™n tr∆∞·ªùng', 'NƒÉm'])['ƒêi·ªÉm Chu·∫©n'].mean().reset_index()
    return json.dumps(data.to_dict(orient='records'), ensure_ascii=False)

# Overview
# Load and clean data
# Load data
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
file_path = os.path.join(BASE_DIR, 'transform_filled_chitieu.xlsx')
df = pd.read_excel(file_path)
df.dropna(subset=['ƒêi·ªÉm Chu·∫©n', 'Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'], inplace=True)
df['T√™n tr∆∞·ªùng'] = df['T√™n tr∆∞·ªùng'].str.strip()
df['T√™n Ng√†nh'] = df['T√™n Ng√†nh'].str.strip()
df['Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'] = df['Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'].str.strip()
df['NƒÉm'] = df['NƒÉm'].astype(int)
df['ƒêi·ªÉm Chu·∫©n'] = pd.to_numeric(df['ƒêi·ªÉm Chu·∫©n'], errors='coerce')

@app.route('/overview')
def overview():
    return render_template('overview.html',
        years=sorted(df['NƒÉm'].unique()),
        schools=sorted(df['T√™n tr∆∞·ªùng'].unique()),
        methods=sorted(df['Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'].unique()))

@app.route('/majors-by-schools', methods=['POST'])
def majors_by_schools():
    schools = request.json.get('schools', [])
    filtered = df.copy() if '__all__' in schools else df[df['T√™n tr∆∞·ªùng'].isin(schools)]
    majors = sorted(filtered['T√™n Ng√†nh'].unique())
    return jsonify({"majors": majors})

@app.route('/filter', methods=['POST'])
def filter_data():
    filters = request.json
    filtered_df = df.copy()

    if filters['year'] and filters['year'] != ['__all__']:
        filtered_df = filtered_df[filtered_df['NƒÉm'].isin([int(y) for y in filters['year']])]
    if filters['school'] and filters['school'] != ['__all__']:
        filtered_df = filtered_df[filtered_df['T√™n tr∆∞·ªùng'].isin(filters['school'])]
    if filters['major'] and filters['major'] != ['__all__']:
        filtered_df = filtered_df[filtered_df['T√™n Ng√†nh'].isin(filters['major'])]


    if filters['method']:
        method_list = df['Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'].unique().tolist()
        if '__all__' not in filters['method'] and set(filters['method']) != set(method_list):
            filtered_df = filtered_df[filtered_df['Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'].isin(filters['method'])]


    if filtered_df.empty:
        return jsonify({'plot_html': '<p class="text-center text-danger">Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p.</p>',
                        'metrics': {'total_records': 0, 'avg_score': 0, 'num_schools': 0, 'num_majors': 0}})

    chart_df = filtered_df.copy()

    # N·∫øu user ch·ªçn T·∫§T C·∫¢ ng√†nh ‚Üí ch·ªâ l·∫•y top 10 ng√†nh c√≥ ƒêI·ªÇM TRUNG B√åNH cao nh·∫•t
    if filters['major'] and '__all__' in filters['major']:
        top10_nganh = (
            chart_df
            .groupby('T√™n Ng√†nh')['ƒêi·ªÉm Chu·∫©n']
            .mean()
            .sort_values(ascending=False)
            .head(5)
            .index.tolist()
        )
        chart_df = chart_df[chart_df['T√™n Ng√†nh'].isin(top10_nganh)]

    avg_by_year = chart_df.groupby(['NƒÉm', 'T√™n tr∆∞·ªùng'], as_index=False)['ƒêi·ªÉm Chu·∫©n'].mean()

    chart_df["NƒÉm"] = chart_df["NƒÉm"].astype(str)
    
    avg_by_year["NƒÉm"] = avg_by_year["NƒÉm"].astype(str)

    # R√∫t g·ªçn t√™n ng√†nh
    # R√∫t g·ªçn t√™n ng√†nh
    # üß† T·∫°o c·ªôt hi·ªÉn th·ªã tr√™n tr·ª•c Ox: Ng√†nh (Ph∆∞∆°ng th·ª©c)
    chart_df = filtered_df.copy()

    # üî• CH·ªà RI√äNG CHO CHART 1
    chart1_df = filtered_df.copy()

    # L·ªçc nƒÉm m·ªõi nh·∫•t
    # N·∫øu user kh√¥ng ch·ªçn nƒÉm ‚áí m·∫∑c ƒë·ªãnh ch·ªçn nƒÉm m·ªõi nh·∫•t
    if not filters['year'] or '__all__' in filters['year']:
        max_year = chart1_df['NƒÉm'].max()
        chart1_df = chart1_df[chart1_df['NƒÉm'] == max_year]
    else:
        # N·∫øu user ch·ªçn nhi·ªÅu nƒÉm ‚Üí hi·ªÉn th·ªã ƒë·ªß
        selected_years = [int(y) for y in filters['year']]
        chart1_df = chart1_df[chart1_df['NƒÉm'].isin(selected_years)]


    # N·∫øu nhi·ªÅu ng√†nh qu√° th√¨ ch·ªâ l·∫•y top 20 ng√†nh ƒëi·ªÉm cao nh·∫•t
    top_majors = (
        chart1_df.groupby('T√™n Ng√†nh')['ƒêi·ªÉm Chu·∫©n']
        .mean()
        .sort_values(ascending=False)
        .head(20)
        .index.tolist()
    )
    chart1_df = chart1_df[chart1_df['T√™n Ng√†nh'].isin(top_majors)]

    # üß† T·∫°o c·ªôt hi·ªÉn th·ªã
    chart1_df['Nh√≥m Ng√†nh'] = chart1_df['T√™n Ng√†nh']
    chart1_df['Label_Tooltip'] = chart1_df['Nh√≥m Ng√†nh']
    chart1_df['NƒÉm'] = chart1_df['NƒÉm'].astype(str)  # üß† Th√™m d√≤ng n√†y

    # üìä V·∫Ω Chart1
    filtered_methods = chart1_df['Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'].dropna().unique()
    is_multi_method = len(filtered_methods) > 1

    if is_multi_method and chart1_df['Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'].nunique() > 1:
        fig1 = px.bar(
        chart1_df,
        x="ƒêi·ªÉm Chu·∫©n",
        y="Nh√≥m Ng√†nh",
        color="NƒÉm",
        barmode="group",
        facet_row="Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn",
        title="üìä So s√°nh ƒêi·ªÉm Chu·∫©n Theo Nhi·ªÅu Ph∆∞∆°ng Th·ª©c (NƒÉm m·ªõi nh·∫•t)"
    )
        fig1.for_each_annotation(lambda a: a.update(text=a.text.split("=")[-1]))
        fig1.for_each_yaxis(lambda y: y.update(title='') if y.anchor != 'x' else None)
    else:
        fig1 = px.bar(
        chart1_df,
        x="ƒêi·ªÉm Chu·∫©n",
        y="Nh√≥m Ng√†nh",
        color="NƒÉm",
        barmode="group",
        title="üìä So s√°nh ƒêi·ªÉm Chu·∫©n Theo Ng√†nh (NƒÉm m·ªõi nh·∫•t)"
    )

        for trace in fig1.data:
            trace.customdata = np.stack([
            chart1_df['T√™n tr∆∞·ªùng'],
            chart1_df['NƒÉm'],
            chart1_df['Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'],
            chart1_df['ƒêi·ªÉm Chu·∫©n']
        ], axis=-1)

        trace.hovertemplate = (
            "<b>Tr∆∞·ªùng:</b> %{customdata[0]}<br>" +
            "<b>NƒÉm:</b> %{customdata[1]}<br>" +
            "<b>Ph∆∞∆°ng th·ª©c:</b> %{customdata[2]}<br>" +
            "<b>ƒêi·ªÉm:</b> %{customdata[3]:.2f}<extra></extra>"
        )

    fig1.update_layout(
        plot_bgcolor="#ffffff",
        paper_bgcolor="#ffffff",
        hovermode="closest",
        bargap=0.19,
        bargroupgap=0.09,
        height=800,
        legend=dict(
            orientation="v",
            yanchor="middle", y=0.5,
            xanchor="left", x=1.02
        ),
        margin=dict(l=60, r=60, t=60, b=120),
        xaxis=dict(title="ƒêi·ªÉm chu·∫©n", tickangle=-30),
        yaxis=dict(title="", gridcolor="#e0e0e0", zeroline=False)
    )
  
    fig2 = px.line(
    avg_by_year,
    x="NƒÉm",
    y="ƒêi·ªÉm Chu·∫©n",
    color="T√™n tr∆∞·ªùng",
    markers=True,
    title="üìà Xu H∆∞·ªõng ƒêi·ªÉm Chu·∫©n Trung B√¨nh Theo Tr∆∞·ªùng"
)
    
    method_stats = chart_df.groupby('Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn').agg(
    ƒêi·ªÉm_TB=('ƒêi·ªÉm Chu·∫©n', 'mean'),
    S·ªë_ng√†nh=('T√™n Ng√†nh', 'nunique')
    ).reset_index()
    method_stats["ƒêi·ªÉm_TB"] = method_stats["ƒêi·ªÉm_TB"].round(2)

    fig3 = px.bar(
    method_stats,
    x="Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn",
    y="ƒêi·ªÉm_TB",
    text="ƒêi·ªÉm_TB",
    color="Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn",
    title="üìä ƒêi·ªÉm TB & S·ªë Ng√†nh Theo Ph∆∞∆°ng Th·ª©c"
)
    fig3.update_traces(
    textposition="outside",
    hovertemplate="<b>Ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn:</b> %{x}<br><b>ƒêi·ªÉm TB:</b> %{y} ƒëi·ªÉm<extra></extra>",
)

    # L·ªçc c√°c tr∆∞·ªùng c√≥ Th√†nh ph·ªë l√† ƒê√† N·∫µng
# Treemap logic: m·∫∑c ƒë·ªãnh l·ªçc ƒê√† N·∫µng, n·∫øu user c√≥ ch·ªçn th√¨ ∆∞u ti√™n filter user

    if not filters['school'] or '__all__' in filters['school']:
        # L·∫•y tr∆∞·ªùng ƒê√† N·∫µng v√† kh√¥ng c√≥ trong danh s√°ch c·∫•m
        default_schools = df[
            df['Th√†nh ph·ªë'].str.contains("ƒê√† N·∫µng", case=False, na=False) &
            ~df['T√™n tr∆∞·ªùng'].str.contains("KHOA C√îNG NGH·ªÜ TH√îNG TIN V√Ä TRUY·ªÄN TH√îNG|TR∆Ø·ªúNG Y D∆Ø·ª¢C|KHOA GI√ÅO D·ª§C TH·ªÇ CH·∫§T|KHOA Y D∆Ø·ª¢C|PH√ÇN HI·ªÜU ƒê·∫†I H·ªåC ƒê√Ä N·∫¥NG T·∫†I KON TUM", case=False, na=False)
        ]['T√™n tr∆∞·ªùng'].unique()

        treemap_df = chart_df[chart_df['T√™n tr∆∞·ªùng'].isin(default_schools)]
    else:
        # N·∫øu ng∆∞·ªùi d√πng ƒë√£ ch·ªçn tr∆∞·ªùng ‚áí d√πng nguy√™n d·ªØ li·ªáu chart_df, KH√îNG lo·∫°i tr·ª´ g√¨ c·∫£
        treemap_df = chart_df.copy()

    # (1) L·∫•y nƒÉm m·ªõi nh·∫•t
    max_year = treemap_df['NƒÉm'].max()
    latest_df = treemap_df[treemap_df['NƒÉm'] == max_year]

    # (2) KH√îNG c·∫ßn groupby trung b√¨nh
    # Gi·ªØ nguy√™n t·ª´ng d√≤ng Tr∆∞·ªùng - Ng√†nh - Ph∆∞∆°ng th·ª©c v·ªõi ƒëi·ªÉm chu·∫©n nƒÉm m·ªõi nh·∫•t

    # (3) Gi·ªõi h·∫°n ch·ªâ l·∫•y 5 tr∆∞·ªùng c√≥ ng√†nh cao nh·∫•t (ƒë·ªÉ tr√°nh tr√†n text)
    top_truong = (
        latest_df.groupby('T√™n tr∆∞·ªùng')['ƒêi·ªÉm Chu·∫©n']
        .max()
        .sort_values(ascending=False)
        .head(5)
        .index.tolist()
    )

    filtered_latest_df = latest_df[latest_df['T√™n tr∆∞·ªùng'].isin(top_truong)]

    # (3b) L·∫•y top 5 ng√†nh c·ªßa m·ªói trong 5 tr∆∞·ªùng
    top5_by_school = filtered_latest_df.groupby('T√™n tr∆∞·ªùng', group_keys=False).apply(
        lambda g: g.sort_values(by='ƒêi·ªÉm Chu·∫©n', ascending=False).head(5)
    ).reset_index(drop=True)

    # (4) R√∫t g·ªçn t√™n ng√†nh: 2 t·ª´/d√≤ng, t·ªëi ƒëa 5 t·ª´
    def wrap_text(text, words_per_line=2, max_words=5):
        words = text.split()
        add_ellipsis = False
        if len(words) > max_words:
            words = words[:max_words]
            add_ellipsis = True
        wrapped_text = ''
        for i in range(0, len(words), words_per_line):
            wrapped_text += ' '.join(words[i:i+words_per_line]) + '<br>'
        wrapped_text = wrapped_text.rstrip('<br>')
        if add_ellipsis:
            wrapped_text += ' ...'
        return wrapped_text

    top5_by_school['T√™n Ng√†nh R√∫t g·ªçn'] = top5_by_school['T√™n Ng√†nh'].apply(lambda x: wrap_text(x))

    # (5) Treemap
    fig4 = px.treemap(
    top5_by_school,
    path=[px.Constant("T·∫•t c·∫£"), 'T√™n tr∆∞·ªùng', 'T√™n Ng√†nh R√∫t g·ªçn'],
    values='ƒêi·ªÉm Chu·∫©n',
    color='ƒêi·ªÉm Chu·∫©n',
    color_continuous_scale='Blues',
    custom_data=['T√™n tr∆∞·ªùng', 'T√™n Ng√†nh', 'ƒêi·ªÉm Chu·∫©n', 'Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'],
    title=f"üóÇÔ∏è Treemap: Tr∆∞·ªùng ‚Üí Ng√†nh Top 5 (NƒÉm {max_year})"
)

    # (6) C·∫≠p nh·∫≠t hover
    fig4.update_traces(
    hovertemplate="<b>Tr∆∞·ªùng:</b> %{customdata[0]}<br>" +
                  "<b>Ng√†nh:</b> %{customdata[1]}<br>" +
                  "<b>ƒêi·ªÉm:</b> %{customdata[2]:.1f} ƒëi·ªÉm<br>" +
                  "<b>Ph∆∞∆°ng th·ª©c:</b> %{customdata[3]}<extra></extra>",
    root_color="white",
    texttemplate="<b>%{label}</b><br><i>%{customdata[2]:.1f} ƒëi·ªÉm</i>",
    textinfo="label+value",
    insidetextfont=dict(size=10),
    marker=dict(line=dict(width=0)),
    selector=dict(type='treemap')
)


    fig4.update_layout(
        height=900,
        margin=dict(l=40, r=40, t=60, b=80),
        uniformtext=dict(minsize=8, mode='show')
    )

    for fig in [fig1, fig2, fig3, fig4]:
        fig.update_layout(
            autosize=True,
            width=None,
            height=700,
            margin=dict(l=40, r=40, t=60, b=80)
        )

    full_html = f'<div id="fig1">{fig1.to_html(full_html=False, include_plotlyjs=False)}</div>' \
            f'<div id="fig2">{fig2.to_html(full_html=False, include_plotlyjs=False)}</div>' \
            f'<div id="fig3">{fig3.to_html(full_html=False, include_plotlyjs=False)}</div>' \
           f'<div id="fig4">{fig4.to_html(full_html=False, include_plotlyjs=False, config=dict(displayModeBar=True))}</div>'

    metrics = {
        'total_records': len(filtered_df),
        'avg_score': round(filtered_df['ƒêi·ªÉm Chu·∫©n'].mean(), 2),
        'num_schools': filtered_df['T√™n tr∆∞·ªùng'].nunique(),
        'num_majors': filtered_df['T√™n Ng√†nh'].nunique()
    }

    fig1_html = fig1.to_html(full_html=False, include_plotlyjs=False)

    # Sau khi ƒë√£ c√≥ fig1, fig2, fig3, fig4
    fig1_html = fig1.to_html(full_html=False, include_plotlyjs=False)
    fig2_html = fig2.to_html(full_html=False, include_plotlyjs=False)
    fig3_html = fig3.to_html(full_html=False, include_plotlyjs=False)
    fig4_html = fig4.to_html(full_html=False, include_plotlyjs=False)

    return jsonify({
        'plot_html': {
            'fig1': fig1_html,
            'fig2': fig2_html,
            'fig3': fig3_html,
            'fig4': fig4_html
        },
        'metrics': metrics
    })
  
@app.route('/suggest', methods=['POST'])
def suggest():
    data = request.get_json()
    methods = data.get('method', [])
    min_score = float(data.get('minScore', 0))
    max_score = float(data.get('maxScore', 1000))
    years = data.get('year', [])

    filtered = df[
        (df['ƒêi·ªÉm Chu·∫©n'] >= min_score) &
        (df['ƒêi·ªÉm Chu·∫©n'] <= max_score)
    ]
    if methods:
        filtered = filtered[filtered['Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'].isin(methods)]
    if years:
        filtered = filtered[filtered['NƒÉm'].isin([int(y) for y in years if str(y).isdigit()])]

    results = filtered[['T√™n tr∆∞·ªùng', 'T√™n Ng√†nh', 'Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn', 'ƒêi·ªÉm Chu·∫©n', 'NƒÉm']].drop_duplicates()
    results = results.sort_values(by='ƒêi·ªÉm Chu·∫©n')
    return jsonify([
        {
            'school': row['T√™n tr∆∞·ªùng'],
            'major': row['T√™n Ng√†nh'],
            'method': row['Ph∆∞∆°ng Th·ª©c X√©t Tuy·ªÉn'],
            'score': round(row['ƒêi·ªÉm Chu·∫©n'], 2),
            'year': row['NƒÉm']
        } for _, row in results.iterrows()
    ])


# Chatbot
genai.configure(api_key="AIzaSyBwLVH64NVzGZ6ISO_jqmsQGX2iXeEyByg")
@app.route('/chatbot', methods=['GET', 'POST'])
@login_required
def chatbot():
    db_user = mongo_client[f"db_user_{current_user.id}"]

    def generate_next_session_id(db_user):
        existing_sessions = [name for name in db_user.list_collection_names() if name.startswith("session_")]
        if not existing_sessions:
            return "session_00001"
        max_number = max([int(name.replace("session_", "")) for name in existing_sessions])
        return f"session_{max_number + 1:05d}"

    def get_latest_session_id(db_user):
        existing_sessions = [name for name in db_user.list_collection_names() if name.startswith("session_")]
        if not existing_sessions:
            return None
        max_number = max([int(name.replace("session_", "")) for name in existing_sessions])
        return f"session_{max_number:05d}"

    is_new_session = False

    # üëâ N·∫øu ch∆∞a c√≥ session_id th√¨ l·∫•y session m·ªõi nh·∫•t ho·∫∑c t·∫°o m·ªõi
    if 'session_id' not in session:
        latest_session_id = get_latest_session_id(db_user)
        if latest_session_id:
            session['session_id'] = f"session_{latest_session_id}"
        else:
            session['session_id'] = "session_00001"
            is_new_session = True

    session_collection = db_user[session['session_id']]

    if request.method == 'GET':
        # Khi load giao di·ªán, ƒë·ªçc messages t·ª´ Mongo
        session_doc = session_collection.find_one({}, {"_id": 0})
        messages = session_doc.get('messages', []) if session_doc else []
        return render_template('chat.html', messages=messages)

    # N·∫øu POST (user g·ª≠i tin nh·∫Øn)
    user_input = request.form.get('user_input')

    # Load tin nh·∫Øn hi·ªán t·∫°i t·ª´ Mongo
    session_doc = session_collection.find_one({}, {"_id": 0})
    messages = session_doc.get('messages', []) if session_doc else []

    # Th√™m user input v√†o messages
    messages.append({"role": "user", "content": user_input})

    # G·ªçi AI tr·∫£ l·ªùi
    response, question_type = main(user_input)
    messages.append({"role": "assistant", "content": response})

    if question_type == "search":
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(BASE_DIR, 'static/media/data.xlsx')
        
        fig = None
        try:
            # ƒê·ªçc file Excel
            df = pd.read_excel(file_path)

            # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o ƒë·ªß ƒëi·ªÅu ki·ªán v·∫Ω
            if df.shape[0] == 0 or "ƒêi·ªÉm Chu·∫©n" not in df.columns:
                chart_html = None
            else:
                unique_majors = df["T√™n Ng√†nh"].nunique()
                unique_universities = df["T√™n tr∆∞·ªùng"].nunique()
                unique_years = df["NƒÉm"].nunique()


                # Tr∆∞·ªùng h·ª£p 1: Nhi·ªÅu nƒÉm, nhi·ªÅu tr∆∞·ªùng, ch·ªâ 1 ng√†nh ‚Üí Line chart theo nƒÉm
                if unique_years >= 2 and unique_universities >= 2:
                    fig = px.line(
                        df,
                        x="NƒÉm",
                        y="ƒêi·ªÉm Chu·∫©n",
                        color="T√™n tr∆∞·ªùng",
                        markers=True,
                        title=f"Bi·ªÉu ƒë·ªì ƒëi·ªÉm chu·∫©n theo nƒÉm c·ªßa ng√†nh {df['T√™n Ng√†nh'].iloc[0]}"
                    )

                # Tr∆∞·ªùng h·ª£p 2: Nhi·ªÅu tr∆∞·ªùng, ch·ªâ 1 ng√†nh ‚Üí Bar chart theo tr∆∞·ªùng
                elif unique_universities >= 2 and unique_majors == 1:
                    latest_year = df["NƒÉm"].max()
                    df_latest = df[df["NƒÉm"] == latest_year]  # Ch·ªçn nƒÉm g·∫ßn nh·∫•t
                    fig = px.bar(
                        df_latest,
                        x="ƒêi·ªÉm Chu·∫©n",
                        y="T√™n tr∆∞·ªùng",
                        orientation="h",
                        title=f"ƒêi·ªÉm chu·∫©n theo tr∆∞·ªùng (nƒÉm {latest_year}) cho ng√†nh {df_latest['T√™n Ng√†nh'].iloc[0]}"
                    )

                # Tr∆∞·ªùng h·ª£p 3: Nhi·ªÅu ng√†nh ‚Üí Bar chart theo ng√†nh
                elif unique_majors >= 2:
                    latest_year = df["NƒÉm"].max()
                    df_latest = df[df["NƒÉm"] == latest_year]
                    fig = px.bar(
                        df_latest,
                        x="ƒêi·ªÉm Chu·∫©n",
                        y="T√™n Ng√†nh",
                        orientation="h",
                        title=f"ƒêi·ªÉm chu·∫©n theo ng√†nh (nƒÉm {latest_year})"
                    )

                # ‚úÖ Tr∆∞·ªùng h·ª£p 4: C√πng 1 tr∆∞·ªùng, c√πng 1 ng√†nh ‚Üí Bar chart theo NƒÉm
                elif unique_universities == 1 and unique_majors == 1 and unique_years >= 2:
                    fig = px.bar(
                        df.sort_values("NƒÉm"),
                        x="ƒêi·ªÉm Chu·∫©n",
                        y="NƒÉm",
                        orientation="h",
                        title=f"ƒêi·ªÉm chu·∫©n theo nƒÉm c·ªßa ng√†nh {df['T√™n Ng√†nh'].iloc[0]} t·∫°i {df['T√™n tr∆∞·ªùng'].iloc[0]}"
                    )

                # T·∫°o HTML n·∫øu c√≥ bi·ªÉu ƒë·ªì
                if fig:
                    chart_html = fig.to_html(
                        full_html=False,
                        include_plotlyjs='cdn',
                        config={
                            "responsive": True,
                            "displaylogo": False,
                            "toImageButtonOptions": {
                                "format": "png",
                                "filename": "chatbot_chart",
                                "height": 400,
                                "width": 600,
                                "scale": 0.7
                            }
                        }
                    )
                    messages.append({
                        "role": "assistant",
                        "content": chart_html,
                        "type": "chart"
                    })
                    
                else:
                    chart_html = None
            

        except Exception as e:
            chart_html = None
            print("L·ªói khi x·ª≠ l√Ω Excel/chart:", e)

    # C·∫≠p nh·∫≠t l·∫°i Mongo
    if is_new_session:
        session_doc = {
            "created_at": datetime.utcnow(),
            "session_title": user_input.capitalize(),
            "messages": messages
        }
        session_collection.insert_one(session_doc)
    else:
        update_data = {
            "updated_at": datetime.utcnow(),
            "messages": messages
        }
        session_collection.update_one({}, {"$set": update_data}, upsert=True)
    
    if question_type == "search" and fig:
        return jsonify({
            "messages": [{"role": "assistant", "content": response},
            {"role": "assistant", "content": chart_html, "type": "chart"}]
        })
    else:
        return jsonify({
            "messages": [{"role": "assistant", "content": response}]
        })
    
@app.route("/get_sessions")
def get_sessions():
    db_user = mongo_client[f"db_user_{current_user.id}"]
    sessions = [name for name in db_user.list_collection_names() if name.startswith("session_")]
    sessions_sorted = sorted(sessions, key=lambda x: int(x.replace("session_", "")))
    return jsonify({"sessions": sessions_sorted})

@app.route("/switch_session", methods=["POST"])
def switch_session():
    session_data = request.get_json()
    session_id = session_data.get("session_id")
    session["session_id"] = session_id

    db_user = mongo_client[f"db_user_{current_user.id}"]
    collection = db_user[session_id]

    # Lu√¥n l·∫•y document theo sort theo created_at m·ªõi nh·∫•t
    doc = collection.find_one({}, {"_id": 0, "messages": 1}, sort=[("created_at", -1)])

    if doc and "messages" in doc:
        session["messages"] = doc["messages"]
    else:
        session["messages"] = []

    return jsonify({"status": "ok"})


def generate_next_session_id(db_user):
    existing_sessions = [name for name in db_user.list_collection_names() if name.startswith("session_")]
    max_number = 0
    for name in existing_sessions:
        try:
            number = int(name.replace("session_", ""))
            max_number = max(max_number, number)
        except ValueError:
            continue
    return f"session_{max_number + 1:05d}"

@app.route("/create_new_session", methods=["POST"])
def create_new_session():
    db_user = mongo_client[f"db_user_{current_user.id}"]
    new_id = generate_next_session_id(db_user)
    session['session_id'] = new_id
    session['messages'] = []
    return jsonify({"status": "created"})

@app.route("/preview_session")
def preview_session():
    session_id = request.args.get("session_id")
    db_user = mongo_client[f"db_user_{current_user.id}"]
    collection = db_user[session_id]
    doc = collection.find_one({}, {"_id": 0, "messages": 1})

    if doc:
        return jsonify({"messages": doc.get("messages", [])})
    else:
        return jsonify({"messages": []})
               

@app.route('/mbti-intro')
def mbti_intro():
    with open(os.path.join(BASE_DIR, 'data', 'mbti_open.json'), 'r', encoding='utf-8') as f:
        mbti_open_profiles = json.load(f)
    return render_template('mbti_home.html', mbti_profiles=mbti_open_profiles)


@app.route('/mbti', methods=['GET', 'POST'])
def mbti_test():
    with open(os.path.join(BASE_DIR, 'data', 'mbti_50_questions.json'), 'r', encoding='utf-8') as f:
        all_questions = json.load(f)

    questions_per_page = 1
    page = int(request.args.get('page', 1))
    total_pages = len(all_questions)

    if request.method == 'POST':
        answer = request.form.to_dict()
        session.setdefault('mbti_answers', {}).update(answer)
        session.modified = True

        if page < total_pages:
            return redirect(url_for('mbti_test', page=page + 1))
        else:
            final_answers = session.pop('mbti_answers', {})
            result = calculate_mbti(final_answers, all_questions)

            with open(os.path.join(BASE_DIR, 'data', 'mbti_profiles.json'), 'r', encoding='utf-8') as f:
                mbti_profiles = json.load(f)

            with open(os.path.join(BASE_DIR, 'data', 'mbti_majors.json'), 'r', encoding='utf-8') as f:
                mbti_majors = json.load(f)

            profile = mbti_profiles.get(result, {})
            majors = mbti_majors.get(result, [])

            return render_template('mbti_result.html', result=result, profile=profile, majors=majors)

    start = (page - 1) * questions_per_page
    questions = all_questions[start:start + questions_per_page]
    return render_template('mbti_test.html', questions=questions, page=page, total_pages=total_pages)


def calculate_mbti(answers, questions):
    traits = {'E': 0, 'I': 0, 'S': 0, 'N': 0, 'T': 0, 'F': 0, 'J': 0, 'P': 0}

    for q in questions:
        qid = q['id']
        choice = answers.get(qid)
        if choice == 'a':
            traits[q['a_trait']] += 1
        elif choice == 'b':
            traits[q['b_trait']] += 1

    mbti = ''.join([
        'E' if traits['E'] >= traits['I'] else 'I',
        'S' if traits['S'] >= traits['N'] else 'N',
        'T' if traits['T'] >= traits['F'] else 'F',
        'J' if traits['J'] >= traits['P'] else 'P'
    ])
    return mbti

def suggest_majors(mbti_type):
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    with open(os.path.join(BASE_DIR, 'data', 'mbti_majors.json'), 'r', encoding='utf-8') as f:
        all_majors = json.load(f)
    return all_majors.get(mbti_type, [])

# Run app
if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True, host="0.0.0.0", port=5000)
